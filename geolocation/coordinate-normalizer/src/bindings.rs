// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod docs {
        pub mod normalizer {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod normalize {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct Coordinates {
                    pub latitude: f64,
                    pub longitude: f64,
                }
                impl ::core::fmt::Debug for Coordinates {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Coordinates")
                            .field("latitude", &self.latitude)
                            .field("longitude", &self.longitude)
                            .finish()
                    }
                }
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct NormalizedCoordinates {
                    pub latitude: f64,
                    pub longitude: f64,
                    pub valid: bool,
                }
                impl ::core::fmt::Debug for NormalizedCoordinates {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("NormalizedCoordinates")
                            .field("latitude", &self.latitude)
                            .field("longitude", &self.longitude)
                            .field("valid", &self.valid)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_normalize_cabi<T: Guest>(
                    arg0: f64,
                    arg1: f64,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::normalize(Coordinates {
                        latitude: arg0,
                        longitude: arg1,
                    });
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let NormalizedCoordinates {
                        latitude: latitude2,
                        longitude: longitude2,
                        valid: valid2,
                    } = result0;
                    *ptr1.add(0).cast::<f64>() = _rt::as_f64(latitude2);
                    *ptr1.add(8).cast::<f64>() = _rt::as_f64(longitude2);
                    *ptr1.add(16).cast::<u8>() = (match valid2 {
                        true => 1,
                        false => 0,
                    }) as u8;
                    ptr1
                }
                pub trait Guest {
                    fn normalize(coords: Coordinates) -> NormalizedCoordinates;
                }
                #[doc(hidden)]
                macro_rules! __export_docs_normalizer_normalize_0_1_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "docs:normalizer/normalize@0.1.0#normalize")] unsafe extern "C"
                        fn export_normalize(arg0 : f64, arg1 : f64,) -> * mut u8 { unsafe
                        { $($path_to_types)*:: _export_normalize_cabi::<$ty > (arg0,
                        arg1) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_docs_normalizer_normalize_0_1_0_cabi;
                #[repr(align(8))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 24]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 24],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }
    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }
    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }
    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_normalizer_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::docs::normalizer::normalize::__export_docs_normalizer_normalize_0_1_0_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::docs::normalizer::normalize);
    };
}
#[doc(inline)]
pub(crate) use __export_normalizer_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:docs:normalizer@0.1.0:normalizer:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 338] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xd1\x01\x01A\x02\x01\
A\x02\x01B\x06\x01r\x02\x08latitudeu\x09longitudeu\x04\0\x0bcoordinates\x03\0\0\x01\
r\x03\x08latitudeu\x09longitudeu\x05valid\x7f\x04\0\x16normalized-coordinates\x03\
\0\x02\x01@\x01\x06coords\x01\0\x03\x04\0\x09normalize\x01\x04\x04\0\x1fdocs:nor\
malizer/normalize@0.1.0\x05\0\x04\0\x20docs:normalizer/normalizer@0.1.0\x04\0\x0b\
\x10\x01\0\x0anormalizer\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-\
component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
